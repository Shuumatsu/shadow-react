{"version":3,"sources":["../src/ShadowReact.js"],"names":[],"mappings":"uwBAAA,4B,2CACA,mCACA,6B,0wCAEqB,Y,gaAgBnB,K,CAAQ,CAAE,SAAU,KAAZ,C,0HAEO,CACb,GAAM,MAAO,KAAK,IAAL,CAAU,IAAvB,CACA,GAAM,MAAO,KAAK,UAAL,EAAmB,KAAK,YAAL,CAAkB,CAAE,KAAM,KAAK,KAAL,CAAW,YAAnB,CAAlB,CAAhC,CACA,GAAM,IACJ,mCAAM,KAAN,CAAY,UAAZ,MACG,KAAK,KAAL,CAAW,UAAX,EAAyB,qCAAK,wBAAyB,CAAE,OAAQ,KAAK,KAAL,CAAW,UAArB,CAA9B,EAD5B,CAEG,KAAK,KAAL,CAAW,QAAX,CAAoB,KAApB,CAA0B,QAF7B,CADF,CAOA,qBAAO,EAAP,CAAW,IAAX,EAEA,MAAO,KACR,C,kHAEoB,I,uKACX,Q,CAAa,KAAK,K,CAAlB,Q,IACH,SAAS,M,kEACd,KAAK,QAAL,CAAc,CAAE,SAAU,IAAZ,CAAd,EAEM,Q,CAAW,SAAS,sBAAT,E,wBAEM,SAAQ,GAAR,CAAY,SAAS,GAAT,mEAAa,iBAAM,GAAN,oJACxC,GADwC,CAClC,IAAI,KAAJ,CAAU,GAAV,EAAe,GAAf,EADkC,CAExC,KAFwC,CAEhC,CACZ,OADY,CAEZ,IAAK,MAAQ,IAAR,CAAe,QAAf,CAA0B,OAFnB,CAFgC,uCAQzB,OAAM,GAAN,CARyB,QAQtC,IARsC,qCASzB,MAAK,IAAL,EATyB,QAStC,IATsC,eAWtC,OAXsC,CAW5B,SAAS,aAAT,CAAuB,MAAM,GAA7B,CAX4B,CAY5C,QAAQ,SAAR,CAAoB,IAApB,CAZ4C,gCAarC,OAbqC,4DAe5C,QAAQ,GAAR,cAf4C,sEAAb,+DAAZ,C,QAAjB,Q,gBAmBN,SAAS,OAAT,CAAiB,iBAAW,CAC1B,GAAI,OAAJ,CACE,SAAS,WAAT,CAAqB,OAArB,CACH,CAHD,EAKA,KAAK,WAAL,CAAiB,QAAjB,EACA,KAAK,QAAL,CAAc,CAAE,SAAU,KAAZ,CAAd,E,oNAGkB,CAClB,GAAM,MAAO,KAAK,YAAL,EAAb,CACA,KAAK,cAAL,CAAoB,IAApB,CACD,C,uCAEQ,CACP,GAAM,aAAc,gBAAS,IAAT,CAAc,KAAK,KAAL,CAAW,QAAzB,CAApB,CACA,GAAI,MAAO,aAAY,IAAnB,GAA4B,QAAhC,CACE,KAAM,IAAI,MAAJ,CAAU,sGAAV,CAAN,CAEF,GAAM,MAAO,mBAAW,CAAC,OAAD,CAAU,UAAV,CAAX,EAAkC,WAAlC,CAAb,CACA,MAAO,+BAAC,IAAD,CAAM,IAAN,gBAAW,IAAI,MAAf,EAA0B,KAAK,KAA/B,EAAsC,UAAW,EAAG,KAAK,KAAL,CAAW,SAAX,CAAuB,KAAK,KAAL,CAAW,SAAlC,CAA8C,EAAjD,OAAuD,KAAK,KAAL,CAAW,QAAX,CAAsB,uBAAtB,CAAgD,sBAAvG,GAAgI,IAAhI,EAAjD,GACR,C,uCAEQ,iBACP,MAAO,IAAI,QAAJ,mEAAY,kBAAM,OAAN,iIACX,IADW,CACJ,OAAK,YAAL,EADI,wBAEX,QAAK,cAAL,CAAoB,IAApB,CAFW,QAGjB,UAHiB,8DAAZ,+DAKR,C,0CAxFkB,W,CAEZ,S,CAAY,CACjB,SAAU,iBAAU,IAAV,CAAe,UADR,CAEjB,SAAU,iBAAU,KAFH,CAGjB,WAAY,iBAAU,MAHL,CAIjB,aAAc,iBAAU,KAAV,CAAgB,CAAC,MAAD,CAAS,QAAT,CAAhB,CAJG,CAKjB,WAAY,iBAAU,MALL,C,CAFA,W,CAUZ,Y,CAAe,CACpB,SAAU,EADU,CAEpB,WAAY,KAFQ,CAGpB,aAAc,MAHM,C,iBAVH,W","file":"ShadowReact.js","sourcesContent":["import React, { Component, PropTypes, Children } from 'react'\nimport { render } from 'react-dom'\nimport { dissocPath } from 'lodash/fp'\n\nexport default class ShadowReact extends Component {\n\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    includes: PropTypes.array,\n    wrapperTag: PropTypes.string,\n    boundaryMode: PropTypes.oneOf(['open', 'closed']),\n    htmlString: PropTypes.string\n  }\n\n  static defaultProps = {\n    includes: [],\n    wrapperTag: 'div',\n    boundaryMode: 'open'\n  }\n\n  state = { fetching: false }\n\n  attachShadow() {\n    const host = this.refs.host\n    const root = host.shadowRoot || host.attachShadow({ mode: this.props.boundaryMode })\n    const el = (\n      <this.props.wrapperTag>\n        {this.props.htmlString && <div dangerouslySetInnerHTML={{ __html: this.props.htmlString }} />}\n        {this.props.children.props.children}\n      </this.props.wrapperTag>\n    )\n\n    render(el, root)\n\n    return root\n  }\n\n  async attachIncludes(root) {\n    const { includes } = this.props\n    if (!includes.length) return\n    this.setState({ fetching: true })\n\n    const fragment = document.createDocumentFragment()\n\n    const elements = await Promise.all(includes.map(async url => {\n      const ext = url.split('.').pop()\n      const infos = {\n        ext,\n        tag: ext === 'js' ? 'script' : 'style'\n      }\n\n      try {\n        const resp = await fetch(url)\n        const text = await resp.text()\n\n        const element = document.createElement(infos.tag)\n        element.innerHTML = text\n        return element\n      } catch (err) {\n        console.log(err)\n      }\n    }))\n\n    elements.forEach(element => {\n      if (element)\n        fragment.appendChild(element)\n    })\n\n    root.appendChild(fragment)\n    this.setState({ fetching: false })\n  }\n\n  componentDidMount() {\n    const root = this.attachShadow()\n    this.attachIncludes(root)\n  }\n\n  render() {\n    const directChild = Children.only(this.props.children)\n    if (typeof directChild.type !== 'string')\n      throw new Error('ShadowReact: Passed direct child must be a concrete HTML element rather than another React component')\n\n    const host = dissocPath(['props', 'children'])(directChild)\n    return <host.type ref='host' {...host.props} className={`${host.props.className ? host.props.className : ''} ${this.state.fetching ? '@ShadowReact_fetching' : '@ShadowReact_fetched'}`.trim()} />\n  }\n\n  update() {\n    return new Promise(async resolve => {\n      const root = this.attachShadow()\n      await this.attachIncludes(root)\n      resolve()\n    })\n  }\n}\n"]}